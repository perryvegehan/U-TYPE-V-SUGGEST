#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX_WORDS   1000
#include <ctype.h>
void spelling();
void grammar();
void token();
int main()
{
	printf("WELCOME TO 'U TYPE WE SUGGEST'\n");
	printf("YOU HAVE THE OPTIONS TO CHECK YOUR ENGLISH PIECE FOR SPELLING MISTAKES, BASIC GRAMMAR MISTAKES AND WORD TOKEN/COUNT\n");
	printf("\n");
	printf("\n");
	printf("\n");
	printf("\n");
	printf("press 1 for checking spelling errors\n ");
	printf("press 2 for checking grammar mistakes\n ");
	printf("press 3 for checking word token/count\n ");
	int user;
	printf("NOW, ENTER YOUR CHOICE\n");
	scanf("%d",&user);
	switch(user)
	{
		case 1:
			spelling();
			break;
		case 2:
			grammar();
			break;
		case 3:
			token();
			break;
		default:
			printf("please enter a valid choice\n");
	}
	return 0;
}//INT MAIN CLOSES



void spelling()
{
	printf("WELCOME TO THE SPELLING CHECKER AND RECTIFIER MODULE\n");
	printf("\n");
printf("\n");
printf("\n");
   char str[100][100];
   char list[1000][100];
   int sug=0,sugchoice=0;
   //printf("enter a word\n");
  // scanf("%s",str);
   int i,k,l,l1,j,count=0,count1=0,y=0,y1=0,co=0,p=0,x=0,loop=0,i1,choice,m,m1;
   char s[100];char sub[100];
   char word[100];int view;
   char w[45],w1[45]={'\n'},w2[45],w3[45],w4[45]={'\n'},w5[45];
   int f1[26]={0},f2[26]={0},f[26]={0};
   //char path[100]="C:\\Users\\PRATYUSH\\Desktop\\EXTRA\\devc\\NEW TEXT\\new.text";
   char path1[100]="C:\\Users\\PRATYUSH\\Desktop\\EXTRA\\devc\\NEW TEXT\\new.text";
   char newfile[20]="new";
   char c,d,e;
char path[100]="C:\\Users\\PRATYUSH\\Desktop\\EXTRA\\devc\\";
   printf("enter a file\n");
   scanf("%s",s);
   strcat(path,s);
   strcat(newfile,s);
   strcat(path1,newfile);
   FILE *fp,*fp1,*fp2,*fp3,*fp4,*fpwrite,*fpview; 
   fp = fopen("dict.txt", "r"); 
   fp2 = fopen("dict.txt", "r");
 fpwrite = fopen(path1, "w");
  fp1 = fopen(path, "r"); 
  fp3 = fopen(path, "r");
  printf("THIS IS YOUR FILE\n");
  while (fscanf(fp3, "%s", w4) != EOF)// D WHILE
        {
        	printf("%s ",w4);
        }
        printf("\n");
        printf("\n");
        printf("\n");

	    
   while (fscanf(fp1, "%s", w1) != EOF)// D WHILE
        {//printf("\n %s\n",w1);
        
        
        for(i=0;i<45;i++)
        
        {
        	i1=i+1;
        	
        	if(w1[i]==44||w1[i]==46||w1[i]=='\n')
        	{
        		break;
			}
			w2[i]=w1[i];
		}
		 l=strlen(w2);
		 //printf("word is %s\n",w2);
        	while (fscanf(fp, "%s", w) != EOF)
            {
            //	printf("\n %s \n",w);
            	if(strcasecmp(w,w2)==0)
            	{
            		p=1;
				}
	
			}            
        if(p==1)
			 {
			 	p=0;
			 	//fp4 = fopen(path, "a");
			 	fputs(w2, fpwrite);
			 		fputs(" ",fpwrite);
			 		//fclose(fp4);
			 	//printf("%s  mil gaya\n",w2);
			 }
			 else
			 {x=0;
			 	printf("It seems you have misspelled  %s\n",w2);
			 	strcpy(str[sug],w2);
			 	sug++;
			 	while (fscanf(fp2, "%s", w3) != EOF)//SUGGESTION START
        	{
        		l1=strlen(w3);
        		l=strlen(w2);
        		for (i = 0; i < l; i++) 
                    f1[w2[i] - 'a']++;
			    for (i = 0; i < l1; i++) 
                    f2[w3[i] - 'a']++; 
                for (i =0; i <26; i++) 
                {
                	if(f1[i]>f2[i])
                	f[i]=f2[i];
                	else
                	f[i]=f1[i];
				}
				for (i = 0; i < 26; i++)
				 count=count+f[i];
				 if(l==2||l==3)
				 {
				 	if(l==l1)
				 	{
				 		if(w2[0]==w3[0])
				 		{
						 
				 		if(count>1){
						 
				 		//printf("%s\n",w3);
				 		strcpy(list[x],w3);
				 		x++;
						 }
						 }
					 }
				 }
				 
				 
				 if(l>3)
		{
		if(l-l1==0||l-l1==1||l-l1==2||l-l1==-1||l-l1==-2)
			{
			if(w2[0]==w3[0]||w2[0]==(w3[0]+32)||w2[0]==(w3[0]-32))
{
	//printf("first\n");
	//printf("%s  pehla wala\n",w3);
if(w2[l-1]==w3[l1-1]||w2[l-1]==(w3[l1-1]+32)||w2[l-1]==(w3[l1-1]-32))
{
	
	if(count>=l-1){
	
				 		//printf("%s\n",w3);
						 strcpy(list[x],w3);
						 x++;
						 }
		 }		 
		}
			}// PENULTIMATE IF
			}// LAST IF
			count=0;
				 memset(f1, 0, sizeof(f1));
				 memset(f2, 0, sizeof(f2));
				 memset(f, 0, sizeof(f));
			}//SUGGESTION WHILE CLOSES
			 	//printf("Here are some of the suggestions\n");
			 	for(m=0;m<x;m++)
			{
			m1=m+1;
				printf("%d. %s\n",m1,list[m]);
			}
			printf("enter the index of the word you originally meant\n");
			scanf("%d",&sugchoice);
			fputs(list[sugchoice-1], fpwrite);
			 		fputs(" ",fpwrite);
			 }//ELSE CLOSES
			 
			 rewind(fp);
			 rewind(fp2);
		}//COMPARE WHILE ENDS
		//printf("value of sug is %d\n",sug);
        printf("\n");
        printf("\n");
		printf("\n");
		 fclose(fp);
        fclose(fp1);
        fclose(fpwrite);
        printf("WOULD YOU LIKE TO VIEW YOUR NEW FILE?\n ");
        printf("press 1 for viewing the new file\n");
        scanf("%d",&view);
        if(view==1)
        {
        	fpview=fopen(path1,"r");
        	while (fscanf(fpview, "%s", w5) != EOF)// D WHILE
        {
        	printf("%s ",w5);
        }
		}
		
		printf("\n");
		printf("\n");
		printf("\n");
		printf("THANK YOU");
        
    

}//SPELLING CLOSES





void grammar()
{
	printf("GRAMMAR CHECK MODULE:\n");
	printf("\n");
	printf("\n");
	
	char str[100][100];
   //printf("enter a word\n");
  // scanf("%s",str);
   int i,l,l1,j,count=0,count1=0,y=0,y1=0,co=0,p=0,x=0,loop=0,i1,choice;
   char s[100];char sub[100];
   char word[100];
   char w[45],w1[45]={'\n'},w2[45],w3[45],w4[45]={'\n'};
   int f1[26]={0},f2[26]={0},f[26]={0};
   char path[100]="C:\\Users\\PRATYUSH\\Desktop\\EXTRA\\devc\\";
   char path1[100]="C:\\Users\\PRATYUSH\\Desktop\\EXTRA\\devc\\";
   printf("enter a file\n");
   scanf("%s",s);
   char c,d,e;
strcat(path,s);
   FILE *fp,*fp1,*fp2,*fp3; 
   fp = fopen(path, "r"); 
   fp2 = fopen(path, "r");
 
  fp1 = fopen(path, "r"); 
  fp3 = fopen(path, "r");
  printf("THIS IS YOUR FILE\n");
  while (fscanf(fp3, "%s", w4) != EOF)// D WHILE
        {
        	printf("%s ",w4);
        }
        printf("\n");
        printf("\n");
        printf("\n");
  printf("Please enter 1 to begin grammar checks and suggestions or enter 0 to terminate the program\n");
scanf("%d",&choice);
if(choice==1)
{
	
	while (fscanf(fp1, "%s", w1) != EOF)// D WHILE
        {//printf("\n %s\n",w1);
        
        y=y+1;
        for(i=0;i<45;i++)
        
        {
        	i1=i+1;
        	
        	if(w1[i]==44||w1[i]==46||w1[i]=='\n')
        	{
        		break;
			}
			w2[i]=w1[i];
		}
		 l=strlen(w2);
		 if(y==1)
		 {
		 	if(w2[0]>=97&&w2[0]<=122)
		 	{printf("ERROR!!!\n");
		 		printf("#The first letter of your text should start with a capital letter\n");
			 }
		 }
	}//MAIN WHILE ENDS
	fclose(fp1);
		while (fscanf(fp, "%s", w) != EOF)// SECOND WHILE
        {//printf("\n %s\n",w1);
        //printf("word is %s\n",w);
                 strcpy(str[p],w);
                 p=p+1;
    
      }//SECOND WHILE CLOSES
	fclose(fp);
	//printf("value of p is %d\n",p);
	for(i=0;i<p;i++)
	{
		l=strlen(str[i]);
		if(str[i][l-1]==46)
		{
			if(i+1<p)
			{
				if(str[i+1][0]>=97 && str[i+1][0]<=122)
				{
					printf("ERROR!!!\n");
					printf("#The first letter of %s should be capital\n",str[i+1]);
				}
			}
		}
	}
l=strlen(str[p-1]);
if(str[p-1][l-1]!=46){
printf("ERROR!!!\n");
printf("#There should be a full stop after %s\n",str[p-1]);}
	//printf("%s ",str[0]);	 
}//user choice closes
}//GRAMMAR CLOSES



void token()
{
	printf("WORD TOKEN/COUNT MODULE\n");
	printf("\n");
	printf("\n");
	
	FILE *fptr;
    char name[100], search[50];
    int i, len, index, isUnique;

    char words[MAX_WORDS][50];
    char word[50];

    int  count[MAX_WORDS];

    printf("Enter file name: ");
    scanf("%s", name);

char path[100]="C:\\Users\\PRATYUSH\\Desktop\\EXTRA\\devc\\";
   strcat(path,name);
    fptr = fopen(path, "r");

    if (fptr == NULL)
    {
        printf("Unable to open file.\n");

        exit(EXIT_FAILURE);
    }

   
    for (i=0; i<MAX_WORDS; i++)
        count[i] = 0;


    index = 0;
   
    while (fscanf(fptr, "%s", word) != EOF)
    {
   
        strlwr(word);

   
        len = strlen(word);
        if (ispunct(word[len - 1]))
            word[len - 1] = '\0';


        isUnique = 1;
        for (i=0; i<index && isUnique; i++)
        {
            if (strcmp(words[i], word) == 0)
                isUnique = 0;
        }


        if (isUnique)
        {
            strcpy(words[index], word);
            count[index]++;

            index++;
        }
        else
        {
            count[i - 1]++;
        }
    }

   
    fclose(fptr);

    printf("\nOccurrences of all distinct words in file: \n");
    for (i=0; i<index; i++)
    {
    printf("%-15s => %d\n", words[i], count[i]);
    }    
   
}//TOKEN CLOSES	
